-- Create users table
CREATE TABLE users (
    id BIGINT PRIMARY KEY,
    telegram_user_id TEXT UNIQUE NOT NULL,
    telegram_username TEXT,
    instagram_user_id TEXT,
    instagram_username TEXT,
    instagram_access_token TEXT,
    is_connected BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()),
    last_used TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW())
);

-- Create oauth_states table
CREATE TABLE oauth_states (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    state TEXT UNIQUE NOT NULL,
    telegram_user_id TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW())
);

-- Create post_history table
CREATE TABLE post_history (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    telegram_user_id TEXT NOT NULL,
    instagram_media_id TEXT,
    caption TEXT,
    media_type TEXT DEFAULT 'REEL',
    success BOOLEAN DEFAULT TRUE,
    error_message TEXT,
    posted_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW())
);

-- Create RLS policies
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE oauth_states ENABLE ROW LEVEL SECURITY;
ALTER TABLE post_history ENABLE ROW LEVEL SECURITY;

-- Create policy to allow all operations for service role
CREATE POLICY "Enable all for service role" ON users FOR ALL USING (auth.role() = 'service_role');
CREATE POLICY "Enable all for service role" ON oauth_states FOR ALL USING (auth.role() = 'service_role');
CREATE POLICY "Enable all for service role" ON post_history FOR ALL USING (auth.role() = 'service_role');
